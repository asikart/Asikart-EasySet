<?php
/**
 * @package     Windwalker.Framework
 * @subpackage  class
 *
 * @copyright   Copyright (C) 2012 Asikart. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 * @author      Generated by AKHelper - http://asikart.com
 */

// no direct access
defined('_JEXEC') or die;

jimport('joomla.application.component.modellist');


class AKModelList extends JModelList
{
	public $component ;
	
	public $item_name ;
	
	public $list_name ;
	
	public $items ;
	
	public $category ;
	

	
    /**
     * Constructor.
     *
     * @param    array    An optional associative array of configuration settings.
     * @see        JController
     * @since    1.6
     */
    public function __construct($config = array())
    {
        parent::__construct($config);
    }

	
	
	/**
	 * Returns a reference to the a Table object, always creating it.
	 *
	 * @param	type	The table type to instantiate
	 * @param	string	A prefix for the table class name. Optional.
	 * @param	array	Configuration array for model. Optional.
	 * @return	JTable	A database object
	 * @since	1.6
	 */
	public function getTable($type = null, $prefix = null, $config = array())
	{
		$prefix = $prefix 	? $prefix 	: ucfirst($this->component).'Table' ;
		$type 	= $type 	? $type 	: $this->item_name ;
		
		return parent::getTable( $type , $prefix , $config );
	}
	
	
	
	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 */
	protected function populateState($ordering = null, $direction = null)
	{
		// Initialise variables.
		$app = JFactory::getApplication();
		
		// Load the parameters.
		$params = JComponentHelper::getParams($this->option);
		$this->setState('params', $params);
		
		// Fulltext search
		if(isset($this->config['fulltext_search'])){
			$this->setState( 'search.fulltext', $this->config['fulltext_search'] );
		}
		
		// Core sidebar
		if(isset($this->config['core_sidebar'])){
			$this->setState( 'core_sidebar', $this->config['core_sidebar'] );
		}
		
		
		
		// Set Nested Items
		// ========================================================================
		$table = $this->getTable();
		if( $table instanceof JTableNested ){
			$nested = true ;
		}else{
			$nested = false ;
		}
		$this->setState( 'items.nested', $nested );
		
		
		
		// Set all filter fields
		// ========================================================================
		$filter = $app->getUserStateFromRequest($this->context.'.field.filter', 'filter');
		$filter_fields = array();
		foreach( $this->filter_fields as $field ){
			$filter_fields[$field] = JArrayHelper::getValue($filter, $field, '') ;
		}
		$this->setState('filter', $filter_fields );
		
		
		$search = $app->getUserStateFromRequest($this->context.'.field.search', 'search');
		if(in_array(JArrayHelper::getValue($search, 'field'), $this->filter_fields) || $this->config['fulltext_search']){
			$this->setState('search', $search );
		}
		
		

		// List state information.
		if(!$ordering){
			$ordering = $nested ? 'a.lft' : 'a.ordering' ;
		}
		
		parent::populateState($ordering, 'asc');
	}

	
	
	/**
	 * Method to get a store id based on model configuration state.
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param	string		$id	A prefix for the store id.
	 * @return	string		A store id.
	 * @since	1.6
	 */
	protected function getStoreId($id = '')
	{
		// Compile the store id.
		$id.= ':' . json_encode($this->getState('search'));
		$id.= ':' . json_encode($this->getState('filter'));

		return parent::getStoreId($id);
	}
	
	
	
	/**
	 * Method to get list page filter form.
	 *
	 * @return	object		JForm object.
	 * @since	2.5
	 */
	
	public function getFilter()
	{
		if(!empty($this->filter)){
			return $this->filter ;
		}
		
		// Get filter inputs from from xml files in /models/form.
		JForm::addFormPath(AKHelper::_('path.get').'/models/forms');
        JForm::addFieldPath(AKHelper::_('path.get').'/models/fields');
		
		
		// Generate sidebar filter by Joomla! core system.
		if( JVERSION >=3 && $this->config['core_sidebar'] ) {
			
			// Get filter inputs from raw xml file.
			$file 	= AKHelper::_('path.get').'/models/forms/'.$this->list_name.'_filter.xml' ;
			$xml 	= simplexml_load_file($file);
			
			$filters 	= $xml->xpath('//fieldset[@name="filter_sidebar"]') ;
			$filters	= $filters[0]->field;
			
			
			$form['filter_sidebar'] 	= $filters ;
		}
		
		
		// load forms
		$form['search'] = JForm::getInstance("{$this->option}.{$this->list_name}.search", $this->list_name.'_search', array( 'control' => 'search' ,'load_data'=>'true'));
		$form['filter'] = JForm::getInstance("{$this->option}.{$this->list_name}.filter", $this->list_name.'_filter', array( 'control' => 'filter' ,'load_data'=>'true'));
		
		
		// Get default data of this form. Any State key same as form key will auto match.
		$form['search']->bind( $this->getState('search') );
		$form['filter']->bind( $this->getState('filter') );
		
		
		return $this->filter = $form;
	}
	
	
	
	/*
	 * function getCategory
	 * @param 
	 */
	
	public function getCategory()
	{
		if(!empty($this->category)){
			return $this->category ;
		}
		
		$pk = $this->getState('category.id') ;
		
		$this->category  = JTable::getInstance('Category');
		$this->category->load($pk);
		
		return $this->category ;
	}
	
	
	
	/*
	 * function getFulltextSearch
	 * @param 
	 */
	
	public function getFullSearchFields()
	{
		$file = AKHelper::_('path.get').'/models/forms/'.$this->list_name.'_search.xml' ;
		
		$xml = simplexml_load_file($file);
		$field = $xml->xpath('//field[@name="field"]') ;
		$options = $field[0]->option ;
		
		$fields = array();
		foreach( $options as $option ):
			$attr = $option->attributes();
			if(in_array($attr['value'], $this->filter_fields)){
				$fields[] = $attr['value'];
			}
		endforeach;
		
		return $fields ;
	}
	
}
